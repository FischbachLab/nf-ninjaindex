includeConfig "$baseDir/conf/aws_batch.config"

/*
 * -------------------------------------------------
 *  nf-core/ninjaindex Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

 manifest {
   name = 'ninjaIndex'
   author = 'Sunit Jain & Xiandong Meng'
   homePage = 'https://github.com/FischbachLab/nf-ninjaindex'
   description = 'Build a ninjaindex for ninjamap database'
   //mainScript = 'main.nf'
   version = '1.0.0'
   defaultBranch = 'main'
 }


// Global default params, used in configs
params {
  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags
  outdir = './output'
  localdir ='./aws_trace'
  db = 'sc'

  // Boilerplate options
  name = false
  email = false
  plaintext_email = false
  monochrome_logs = false
  help = false
  //tracedir = "${params.outdir}/pipeline_info"
  tracedir = "${localdir}/pipeline_info"
  awsqueue = false
  awsregion = 'us-west-2'
  custom_config_version = 'master'
  custom_config_base = ""
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
  container_index = '458432034220.dkr.ecr.us-west-2.amazonaws.com/ninjaindex:20250313110747'
                      //or 'fischbachlab/ninjaindex:20250313110747' 
                      //old version  '458432034220.dkr.ecr.us-west-2.amazonaws.com/ninjaindex:20210323210404'
  container_art = '458432034220.dkr.ecr.us-west-2.amazonaws.com/art:20210323210208'
  container_bowtie2 = '458432034220.dkr.ecr.us-west-2.amazonaws.com/bowtie2:20210323224201'
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
//process.container = '458432034220.dkr.ecr.us-west-2.amazonaws.com/ninjaindex:20210323210404'
//fischbachlab/ninjaindex:latest'

process {
    //withName:grinder_fastq {
    //    container = 'fischbachlab/biogrinder:latest'
    //}
    /*withName:art_fastq {
        container = '458432034220.dkr.ecr.us-west-2.amazonaws.com/art:20210323210208'
        //'fischbachlab/art:latest'
    }

    withName:bowtie2_mapping{
        container = '458432034220.dkr.ecr.us-west-2.amazonaws.com/bowtie2:20210323224201'
        //fischbachlab/bowtie2:latest'
    }
    */
    //withName:bowtie2_mapping_sam_header{
    //    container = 'fischbachlab/bowtie2:latest'
    //}
    //withName:bowtie2_self_mapping{
    //    container = 'fischbachlab/bowtie2:latest'
    //}
    //withName:genome_size{
    //    container = 'fischbachlab/bedtools:latest'
    //}
    //withName:bedtools_processing{
    //    container = 'fischbachlab/bedtools:latest'
    //}
    //withName:mask_genomes{
    //    container = 'fischbachlab/bedtools:latest'
    //}
    cache = false
}

docker {
    enabled = true
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = false
  overwrite = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = false
  overwrite = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
 enabled = false
 overwrite = true
 file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = false
  overwrite = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond
 // a maximum limit
 def check_max(obj, type) {
   if(type == 'memory'){
     try {
       if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
         return params.max_memory as nextflow.util.MemoryUnit
       else
         return obj
     } catch (all) {
       println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
       return obj
     }
   } else if(type == 'time'){
     try {
       if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
         return params.max_time as nextflow.util.Duration
       else
         return obj
     } catch (all) {
       println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
       return obj
     }
   } else if(type == 'cpus'){
     try {
       return Math.min( obj, params.max_cpus as int )
     } catch (all) {
       println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
       return obj
     }
   }
 }